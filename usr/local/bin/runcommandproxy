#!/bin/bash

if test `id -u` -eq 0; then
    echo
    echo
    echo "************** WARNING ****************"
    echo "Running the dedicated server as root   "
    echo "is highly discouraged. It is absolutely"
    echo "unnecessary to use root privileges to  "
    echo "execute the dedicated server.          "
    echo "If you do execute this as root it WILL "
    echo "cause problems and sure failure.       "
    echo "***************************************"
    echo
    echo
    timeout=10
      while test $timeout -gt 0; do
        echo "The server will exit(1) in $timeout seconds"
        timeout=`expr $timeout - 1`
        sleep 1
      done
    exit 1
fi

workingdir="/home/srcds/bin/"
secretcode="6674eBjI03"
serverid="PocoCraft-RCON-Control"
pococraftrconport="21120"
pococraftrconpidsuffix="$serverid-$pococraftrconport"
serverfifonum="$serverid"
restartfnafstring="/restartfnaf/"
restartsandboxstring="/restartsandbox/"
helpstring="/help"
killcommandproxystring="/restartcommandproxy/"

mkfifo $serverfifonum

(while true ; do netcat -lp $pococraftrconport ; done < $serverfifonum) | {
while true ; do
  read inputparams
  #if [[ "${inputparams/$restartfnafstring}" == "$inputparams" ]]; then
  if [[ $inputparams == *$restartfnafstring* ]]; then
    killall fivenights_srcds_linux
    exitstatus=$?
    if [[ $exitstatus == "0" ]]; then
      #echo -e -n "Last command exited with status: $exitstatus\n<br>Restarting FNaF servers..\n<br>" > /dev/tcp/127.0.0.1/25005
      runcommandproxy-help-success $exitstatus FNaF > /dev/tcp/127.0.0.1/25005
      #echo "Restarting FNaF servers.."
    else
      #echo -e -n "Last command exited with status: $exitstatus\n<br>Restarting the server has failed..\n<br>This may be because the server is not running.\n<br>" > /dev/tcp/127.0.0.1/25005
      runcommandproxy-help-fail $exitstatus FNaF > /dev/tcp/127.0.0.1/25005
      #echo "Restarting the server has failed.."
      #echo "This may be because the server is not running."
    fi
    inputparams=""
  elif [[ $inputparams == *$restartsandboxstring* ]]; then
    # REMOVED DUE TO MASS UPDATE
    #killall sandbox_srcds_linux
    killall runsandbox-tetra-server
    exitstatus=$?
    if [[ $exitstatus == "0" ]]; then
      #echo -e -n "Last command exited with status: $exitstatus\n<br>Restarting Sandbox servers..\n<br>" > /dev/tcp/127.0.0.1/25005
      runcommandproxy-help-success $exitstatus Sandbox > /dev/tcp/127.0.0.1/25005
      #echo -e -n "Restarting Sandbox servers.."
    else
      #echo "Last command exited with status: $exitstatus\n<br>Restarting the server has failed..\n<br>This may be because the server is not running.\n<br>" > /dev/tcp/127.0.0.1/25005
      runcommandproxy-help-fail $exitstatus Sandbox > /dev/tcp/127.0.0.1/25005
      #echo "Restarting the server has failed.."
      #echo "This may be because the server is not running."
    fi
    inputparams=""
  elif [[ $inputparams == *$helpstring* ]]; then
    #echo -e -n "PocoCraft Command Interpreter Proxy help\n<br>Please refer to this if the old commands are no longer functional..\n<br>Server commands MUST be surrounded with the '/' character in order to be ran.\n<br>The help command is the ONLY one that begins with ONE '/' and no trailing slash.\n<br>Restart FNaF: restartfnaf\n<br>Restart Sandbox: restartsandbox\n<br>Restart Command Proxy: restartcommandproxy\n<br>End of help manual\n<br>" > /dev/tcp/127.0.0.1/25005
    runcommandproxy-help-message > /dev/tcp/127.0.0.1/25005
    #echo "Please refer to this if the old commands are no longer functional.."
    #echo "Server commands MUST be surrounded with the '/' character in order to be ran."
    #echo "The help command is the ONLY one that begins with ONE '/' and no trailing slash."
    #echo "Restart FNaF: restartfnaf"
    #echo "Restart Sandbox: restartsandbox"
    #echo "Restart Command Proxy: restartcommandproxy"
    #echo "End of help manual"
  elif [[ $inputparams == *$killcommandproxystring* ]]; then
    #echo -e -n "Halting Command Proxy for restart in 5 seconds.." > /dev/tcp/127.0.0.1/25005
    #for m in {5..1}; do
    #  echo -e -n $m > /dev/tcp/127.0.0.1/25005
    #  sleep 1
    #done
    runcommandproxy-restart-echo > /dev/tcp/127.0.0.1/25005
    killall -9 runcommandproxy
    killall -9 netchat-proxy
  elif [[ $inputparams == "" ]]; then
    echo -n ""
  else
    echo -n ""
  fi
done
} 2>&1 | tee $serverfifonum #> /dev/tcp/127.0.0.1/25005
